# A helper script to populate vtable in _MCIL_SERVICE_CALLBACKS
# @author Nyan Cat
# @category A_Red
# @keybinding
# @menupath
# @toolbar

# pyright: reportMissingImports=false
# pyright: reportUndefinedVariable=false

from java.util import ArrayList

from ghidra.program.model.data import CategoryPath, FunctionDefinitionDataType, PointerDataType
from ghidra.program.model.data import DataTypeConflictHandler


def getDataType(typeName, typeManager):
    matches = ArrayList()
    typeManager.findDataTypes(typeName, matches)

    if len(matches) > 1:
        print("Warning: Using the first " + typeName)
    elif len(matches) == 0:
        return None

    return matches[0]


funcManager = currentProgram.getFunctionManager()
typeManager = currentProgram.getDataTypeManager()

funcNames = ['_TtlRtsQueryHwipInfo', '_TtlRtsQueryFwLoadingStatus', '_TtlGetVbiosRom', '_TtlRtsQueryVmCapabilities', '_TtlRtsEnableVmDomain', '_TtlRtsDisableVmDomain', '_TtlRtsDisableAllVmDomains', '_TtlRtsMapToGart', '_TtlRtsUnmapFromGart', '_TtlRtsResetAdapter', '_TtlRtsSetPowerState', '_TtlRtsSaveGartPartition', '_TtlRtsRestoreGartPartition', '_TtlRtsQueryVbiosTableRevision', '_TtlRtsExecuteVbiosCmdTable', '_TtlRtsGetCameraNum', '_TtlRtsQueryCameraService', '_TtlRtsSecurityMeritServices', '_TtlRtsSecurityOpmServices', '_TtlRtsSecurityHdcpServices', '_TtlRtsSecurityHcServices', '_TtlRtsSecurityDisplayTopologyServices', '_TtlRtsSecurityGcpServices', '_TtlRtsSecurityAucServices', '_TtlRtsSecurityFpServices', '_TtlRtsSecurityXgmiServices', '_TtlRtsSecurityRapServices', '_TtlRtsSecurityPowerplayServices', '_TtlQuerySecurityFeatureCaps', '_TtlRtsCreateEngine', '_TtlCreateHybridEngine', '_TtlRtsDestroyEngine', '_TtlRtsQueryCommandInfo', '_TtlRtsBuildCommand', '_TtlRtsSubmitFrame', '_TtlRtsQueryDependentEngineGroup', '_TtlRtsQueryEngineState', '_TtlRtsResetEngine', '_TtlRtsNotifyEngine', '_TtlAdjustSystemAperture', '_TtlGpuMemoryCopy', '_TtlUpdateEccErrorCount', '_TtlQueryEngineCount', '_TtlGetEccUcCount', '_TtlEccErrorInjection', '_TtlNotifySurpriseRemoval', '_TtlQueryHwIpInstanceInfo', '_TtlRtsMapToGartSaveContext', '_TtlRtsUnmapFromGartSaveContext', '_TtlNotifyHardwareState', '_TtlRtsPpTableControl', '_TtlRtsOverdriveControl', '_TtlRtsFanControl', '_TtlRtsThermalControl', '_TtlRtsDpmControl', '_TtlRtsPowerControl', '_TtlRtsIpsControl', '_TtlRtsAzaliaControl', '_TtlRtsUlvControl', '_TtlRtsGfxOffControl', '_TtlRtsAllSystemFeatureControl', '_TtlRtsI2CControl', '_TtlNotifyNumberOfDisplays', '_TtlQueryPowerFeatureCaps', '_TtlPowerManagementLog', '_TtlRtsQueryEccInfo', '_TtlRtsNotifyFullScreen', '_TtlRtsQueryGpuInfo', '_TtlRtsRasControl', '_TtlClearVpr', '_TtlSetHwsResource', '_TtlSetHwResource', '_TtlAddHwsQueue', '_TtlRemoveHwsQueue', '_TtlSetSchedulingConfig', '_TtlChangeGangPriority', '_TtlSuspendGang', '_TtlResumeGang', '_TtlResetGang', '_TtlSetLoggingBuffer', '_TtlSetDebugVmid', '_TtlQuerySchedulerStatus', '_TtlRefreshVbiosString', '_TtlGetAsicResetMode', '_TtlQueryMesInfo', '_TtlRtsInterruptServices', '_TtlRtsCollectEngineDiagInfo', '_TtlRtsQueryDoorbellRange', '_TtlRtsUpdateUMDStablePState', '_TtlProgramGds', '_TtlRtsQueryLastSwipFailure', '_TtlRtsSetAggregateDoorbellInfo', '_TtlRtsQueryHwCtxState', '_TtlRtsPspProgramRegister', '_TtlRtsRegWriteExt', '_TtlRtsGetVfMailbox', '_TtlRtsSetVfMailbox', '_TtlRtsPspSetupDchubHostvmDefaultPage', '_TtlRtsVcnIommuAtc', '_TtlRtsSetXgmiInfo', '_TtlRtsQueryXgmiInfo', '_TtlRtsQuerySysInfo', '_TtlMesMisc', '_TtlRtSaveInfoPrePowerDown', '_TtlRtsCollectDbgInfo', '_TtlRtsLoadFirmware', '_TtlQueryMesHwSwStatusInfo', '_TtlPushToStb', '_TtlUpdateRootPageTable', '_TtlRtsSetupRLCXTLogging', '_TtlRtsCopyFrame', '_TtlQueryFwAttestationInfo']
# funcNames = ["AtiAppleCailServices::" + x for x in funcNames]
done = [False] * len(funcNames)
ptrs = [None] * len(funcNames)

for func in funcManager.getFunctions(True):
    fullName = str(func)
    funcName = fullName.split("::")[-1]
    if funcName not in funcNames:
        continue

    funcSign = func.getSignature(False)

    funcType = FunctionDefinitionDataType(CategoryPath("/AMDGen/FuncSigns"), funcName + "_sign", funcSign)
    funcType = typeManager.addDataType(funcType, DataTypeConflictHandler.REPLACE_HANDLER)
    ptrType = PointerDataType(funcType, typeManager)
    ptrType = typeManager.addDataType(ptrType, DataTypeConflictHandler.REPLACE_HANDLER)

    for i in range(len(funcNames)):
        if funcNames[i] == funcName:
            assert not done[i]
            done[i] = True
            ptrs[i] = ptrType
            funcNames[i] = fullName

assert all([done[i] or funcNames[i] is None for i in range(len(funcNames))])

serviceCallback = getDataType("RtsCallback", typeManager)
for i in range(len(funcNames)):
    if funcNames[i] is None:
        continue
    serviceCallback.replaceAtOffset(8 * (i + 0), ptrs[i], 8, funcNames[i], "Generated by Z_createRtsCallbackVtable.py")
